---
base-job: &base-job
  max_in_flight: 1
  on_success:
    try:
      put: notifications
      inputs: [repo.git]
      no_get: true
      params: {state: success}
  on_failure:
    try:
      put: notifications
      inputs: [repo.git]
      no_get: true
      params: {state: failure}
  on_error:
    try:
      put: notifications
      inputs: [repo.git]
      no_get: true
      params: {state: error}

pending:
  - &pending
    try:
      put: notifications
      inputs: [repo.git]
      no_get: true
      params: {state: pending}

conan-params: &conan-params
  CONAN_URL: https://conan.ci.pix4d.com
  CONAN_LOGIN_USERNAME: ((conan_ro_username))
  CONAN_PASSWORD: ((conan_ro_password))
  CONAN_LOCKFILE: lockfile.ini

conan-build-params: &conan-build-params
  CONAN_URL: https://conan.ci.pix4d.com
  CONAN_LOGIN_USERNAME: ((conan_rw_username))
  CONAN_PASSWORD: ((conan_rw_password))
  CONAN_CHANNEL: ((branch))
  CONAN_UPLOAD: ((upload_conan_package))
  CONAN_LOCKFILE: lockfile.ini

s3-params: &s3-params
  bucket: ci-pix4d-concourse-pipeline
  region_name: eu-west-1
  access_key_id: ((concourse_user_access_key))
  secret_access_key: ((concourse_user_secret_key))

docker-registry-config: &docker-registry-config
  username: ((docker_cloud_pix4d_user))
  password: ((docker_cloud_pix4d_password))

####################################################################################################

resource_types:
  - name: cogito
    type: registry-image
    check_every: 24h
    source:
      repository: pix4d/cogito
      tag: latest

  - name: cron-resource
    type: registry-image
    check_every: 24h
    source:
      repository: cftoolsmiths/cron-resource

####################################################################################################

resources:
- name: ubuntu-22.04.docker
  type: registry-image
  check_every: 24h
  source:
    <<: *docker-registry-config
    repository: docker.ci.pix4d.com/lean-cpp-builder-ubuntu-22.04
    tag: latest

- name: tester-ubuntu-22.04.docker
  type: registry-image
  check_every: 24h
  source:
    <<: *docker-registry-config
    repository: docker.ci.pix4d.com/lean-cpp-tester-ubuntu-22.04
    tag: latest

# The conan builder image needs to be able to build all dependencies. For this
# reason they are defined in the conan-builder repository and shared by all
# repos
- name: conan-builder-ubuntu-22.04.docker
  type: registry-image
  check_every: 24h
  source:
    <<: *docker-registry-config
    repository: docker.ci.pix4d.com/conan-builder-ubuntu-22.04
    tag: latest

- name: repo.git
  type: git
  icon: git
  webhook_token: ((concourse_gh_webhook))
  source:
    uri: git@github.com:Pix4D/pix4d-sam-inference.git
    private_key: ((github_ssh_key))
    branch: ((branch))

- name: shared-deps.git
  type: git
  icon: git
  source:
    uri: git@github.com:Pix4D/pix4d-algo-conan-deps.git
    private_key: ((github_ssh_key))
    branch: master

- name: artifacts-ubuntu-22.04.s3
  type: s3
  icon: package
  source:
    regexp: artifacts/((project))/((branch))/ubuntu-22\.04-(.*).tar
    <<: *s3-params

- name: wheel.s3
  type: s3
  icon: package
  source:
    regexp: artifacts/((project))/((branch))/pix4d_sam_inference-(.*)-py3-.*\.whl
    <<: *s3-params

- name: gpu-artifacts-ubuntu-22.04.s3
  type: s3
  icon: package
  source:
    regexp: artifacts/((project))/((branch))/gpu-ubuntu-22\.04-(.*).tar
    <<: *s3-params

- name: artifacts-windows.s3
  type: s3
  icon: package
  source:
    regexp: artifacts/((project))/((branch))/windows-(.*).zip
    <<: *s3-params

- name: artifacts-windows-debug.s3
  type: s3
  icon: package
  source:
    regexp: artifacts/((project))/((branch))/windows-debug-(.*).zip
    <<: *s3-params

- name: artifacts-macos.s3
  type: s3
  icon: package
  source:
    regexp: artifacts/((project))/((branch))/macos-14\.0-(.*).tar
    <<: *s3-params

- name: artifacts-macos-arm.s3
  type: s3
  icon: package
  source:
    regexp: artifacts/((project))/((branch))/macos-14\.0-arm-(.*).tar
    <<: *s3-params

- name: qa-artifacts.s3
  type: s3
  icon: package
  source:
    regexp: ((perftracker_dest))/((project))/((branch))/QA/(.*)
    <<: *s3-params

- name: notifications
  icon: chat-alert
  type: cogito
  check_every: never
  source:
    owner: Pix4D
    repo: pix4d-sam-inference
    access_token: ((github_repo_status_token))
    gchat_webhook: ((gchat_hook))

- name: version
  type: semver
  source:
    driver: s3
    key: _concourse/((project))/((branch))/version
    <<: *s3-params

- name: weekday-7-30.time
  type: cron-resource
  icon: calendar-clock
  check_every: ((time-trigger-check-period))
  source:
    expression: "30 7 * * MON-FRI"
    location: "CET"
    fire_immediately: true

- name: monday-6-30.time
  type: cron-resource
  icon: calendar-clock
  check_every: ((time-trigger-check-period))
  source:
    expression: "30 6 * * MON"
    location: "CET"
    fire_immediately: true

####################################################################################################

jobs:

- name: get-version
  plan:
  - get: repo.git
    trigger: ((branch-is-stable))
    params: { disable_git_lfs: true, submodules: [pix4d_build_tools] }
  - task: get-version
    params:
      BRANCH: ((branch))
    file: repo.git/pix4d_build_tools/ci/tasks/get-version.yml
  - put: version
    inputs: [version]
    no_get: true
    params:
      file: version/version

- name: build-ubuntu
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [get-version]
      trigger: true
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, analytics-build-tools, data] }
    - get: version
      passed: [get-version]
    - get: ubuntu-22.04.docker
  - *pending
  - task: build-ubuntu
    image: ubuntu-22.04.docker
    file: repo.git/pix4d_build_tools/ci/tasks/build-linux.yml
    params:
      <<: *conan-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/gcc-ubuntu-22.04
      CONAN_INSTALL_CMD_EXTRA: -o pix4d-sam-inference:test_build=True -o pix4d-sam-inference:build_python_bindings=True -o onnxruntime:CUDA_VERSION=((u22_cuda_version))
      PKG_NAME: ubuntu-22.04
  - put: artifacts-ubuntu-22.04.s3
    inputs: [build-dir]
    no_get: true
    params: {file: build-dir/ubuntu-22.04-*.tar}
  - task: build-wheel
    image: ubuntu-22.04.docker
    file: repo.git/analytics-build-tools/ci/tasks/build-wheel-linux.yml
    params:
        WITHOUT_CPP: true
  - put: wheel.s3
    inputs: [dist]
    no_get: true
    params: {file: dist/pix4d_sam_inference-*.whl}

- name: build-windows
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [get-version]
      trigger: true
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, data] }
    - get: version
      passed: [get-version]
  - *pending
  - task: build-windows
    file: repo.git/pix4d_build_tools/ci/tasks/build-windows.yml
    tags: [vs2019]
    params:
      <<: *conan-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/msvc2019Release
      CONAN_INSTALL_CMD_EXTRA: -o pix4d-sam-inference:test_build=True -o pix4d-sam-inference:build_python_bindings=True -o pix4d-sam-inference:ship_pdb=True
      CMAKE_CMD_EXTRA: -DPYTHON_EXECUTABLE=C:\Python310\python.exe
      PKG_NAME: windows
  - put: artifacts-windows.s3
    inputs: [build-dir]
    no_get: true
    params: {file: build-dir/windows-*.zip}

- name: build-macos
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [get-version]
      trigger: false
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, data] }
    - get: version
      passed: [get-version]
  - *pending
  - task: build-macos
    file: repo.git/pix4d_build_tools/ci/tasks/build-macos.yml
    tags: [sonoma-arm64]
    params:
      <<: *conan-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/clang15.0-macos-intel-14.0
      CONAN_INSTALL_CMD_EXTRA: -o pix4d-sam-inference:test_build=True -o pix4d-sam-inference:build_python_bindings=True
      PLATFORM: macos-14.0
      PKG_NAME: macos-14.0
      CMAKE_CMD_EXTRA: -DCMAKE_OSX_ARCHITECTURES=x86_64
  - put: artifacts-macos.s3
    inputs: [build-dir]
    no_get: true
    params: {file: build-dir/macos-14.0-*.tar}

- name: build-macos-arm
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [get-version]
      trigger: false
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, data] }
    - get: version
      passed: [get-version]
  - *pending
  - task: build-macos
    file: repo.git/pix4d_build_tools/ci/tasks/build-macos.yml
    tags: [sonoma-arm64]
    params:
      <<: *conan-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/clang15.0-macos-arm-14.0
      CONAN_INSTALL_CMD_EXTRA: -o pix4d-sam-inference:test_build=True -o pix4d-sam-inference:build_python_bindings=True
      PLATFORM: macos-arm64-14.0
      PKG_NAME: macos-14.0-arm
  - put: artifacts-macos-arm.s3
    inputs: [build-dir]
    no_get: true
    params: {file: build-dir/macos-14.0-arm*.tar}

- name: check-dependencies
  on_success:
    # Do nothing

  on_failure:
    put: notifications
    inputs: [repo.git]
    no_get: true
    params:
      state: failure
      chat_message: "<users/all>: Dependency check failed, please check on the CI."

  on_error:
    put: notifications
    inputs: [repo.git]
    no_get: true
    params:
      state: error
      chat_message: "<users/all>: The dependency check could not be completed due to a concourse error."
  plan:
  - in_parallel:
    - get: weekday-7-30.time
      trigger: ((branch-is-stable))
    - get: repo.git
      params: { disable_git_lfs: true, submodules: [pix4d_build_tools, conan-profiles] }
    - get: shared-deps.git
      params: { disable_git_lfs: true }
    - get: ubuntu-22.04.docker
  - task: check-dependencies
    image: ubuntu-22.04.docker
    file: shared-deps.git/ci/tasks/check-shared-deps.yml
    params:
      CONAN_LOCKFILES: lockfile.ini

- name: test-ubuntu
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [build-ubuntu]
      params: { disable_git_lfs: false, submodules: [pix4d_build_tools, data] }
    - get: version
      passed: [build-ubuntu]
    - get: artifacts-ubuntu-22.04.s3
      passed: [build-ubuntu]
      trigger: true
      params: {unpack: true}
    - get: wheel.s3
      passed: [build-ubuntu]
      trigger: true
    - get: tester-ubuntu-22.04.docker
  - *pending
  - task: test-ubuntu-22.04
    image: tester-ubuntu-22.04.docker
    file: repo.git/pix4d_build_tools/ci/tasks/unit-linux.yml
    input_mapping: { build-artifacts: artifacts-ubuntu-22.04.s3 }
    params:
      HAS_GPU: "0"
      PIX4D_TEST_DATA_PATH: repo.git/data

- name: test-windows
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [build-windows]
      params: { disable_git_lfs: false, submodules: [pix4d_build_tools, data] }
    - get: version
      passed: [build-windows]
    - get: artifacts-windows.s3
      passed: [build-windows]
      trigger: true
      params: {unpack: true}
  - *pending
  - task: test-windows
    tags: [windows-tester]
    file: repo.git/pix4d_build_tools/ci/tasks/unit-windows.yml
    input_mapping: { build-artifacts: artifacts-windows.s3 }
    params:
      HAS_GPU: "0"
      PIX4D_TEST_DATA_PATH: repo.git/data

- name: test-macos
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [build-macos]
      params: { disable_git_lfs: false, submodules: [pix4d_build_tools, data] }
    - get: version
      passed: [build-macos]
    - get: artifacts-macos.s3
      passed: [build-macos]
      trigger: true
      params: {unpack: true}
  - *pending
  - task: test-macos
    tags: [ventura-tester]
    file: repo.git/pix4d_build_tools/ci/tasks/unit-macos.yml
    input_mapping: { build-artifacts: artifacts-macos.s3 }
    params:
      HAS_GPU: "1"
      PIX4D_TEST_DATA_PATH: repo.git/data

- name: test-macos-arm
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [build-macos-arm]
      params: { disable_git_lfs: false, submodules: [pix4d_build_tools, data] }
    - get: version
      passed: [build-macos-arm]
    - get: artifacts-macos-arm.s3
      passed: [build-macos-arm]
      trigger: true
      params: {unpack: true}
  - *pending
  - task: test-macos-arm
    tags: [ventura-tester-arm64]
    file: repo.git/pix4d_build_tools/ci/tasks/unit-macos.yml
    input_mapping: { build-artifacts: artifacts-macos-arm.s3 }
    params:
      HAS_GPU: "1"
      PIX4D_TEST_DATA_PATH: repo.git/data

- name: gpu-package-ubuntu
  <<: *base-job
  plan:
  - in_parallel:
    - do:
      - get: repo.git
        passed: [build-ubuntu]
        params: { disable_git_lfs: false, submodules: [data] }
      - *pending
    - get: version
      passed: [build-ubuntu]
    - get: artifacts-ubuntu-22.04.s3
      passed: [build-ubuntu]
      trigger: true
      params: {unpack: true}
    - get: tester-ubuntu-22.04.docker
  - task: package-gpujob-data
    image: tester-ubuntu-22.04.docker
    file: repo.git/ci/tasks/package_gpujob_data.yml
    input_mapping: { build-artifacts: artifacts-ubuntu-22.04.s3 }
    params:
      UBUNTU_VERSION: "22.04"
  - put: gpu-artifacts-ubuntu-22.04.s3
    inputs: [out_dir]
    no_get: true
    params: {file: out_dir/gpu-ubuntu-22.04-*.tar.gz}

- name: gpu-test-ubuntu
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [gpu-package-ubuntu]
      params: { disable_git_lfs: true, submodules: [pix4d_build_tools] }
    - get: version
      passed: [gpu-package-ubuntu]
    - get: gpu-artifacts-ubuntu-22.04.s3
      passed: [gpu-package-ubuntu]
      trigger: true
      params: {skip_download: "true"}
  - *pending
  - task: test-ubuntu
    file: repo.git/pix4d_build_tools/ci/tasks/gpu-runner.yml
    input_mapping: { artifact.s3: gpu-artifacts-ubuntu-22.04.s3 }
    params:
      EXEC_CMD: ./run_tests.sh
      JOB_DEF: concourse_gpu_ubuntu_22_04_prod
    ensure:
      task: ensure-termination
      file: repo.git/pix4d_build_tools/ci/tasks/gpu-ensure-termination.yml

###### perftracker ######

- name: perftracker
  plan:
  - get: repo.git
    passed:
      - test-ubuntu
      - test-windows
    params: { disable_git_lfs: true, submodules: none }
  - get: version
    passed:
      - test-ubuntu
      - test-windows
  - get: wheel.s3
    passed:
      - test-ubuntu

- name: ship-files
  plan:
  - in_parallel:
    - get: repo.git
      passed: [perftracker]
      params: { disable_git_lfs: true, submodules: none }
      trigger: true
    - get: version
      passed: [perftracker]
      trigger: false
    - get: artifacts-ubuntu-22.04.s3
      passed:
        - test-ubuntu
    - get: artifacts-windows.s3
      passed:
        - test-windows
    - get: wheel.s3
      passed:
        - test-ubuntu

  - task: prepare-pt-tools
    input_mapping:
        { wheel: wheel.s3, build_lin: artifacts-ubuntu-22.04.s3, build_win: artifacts-windows.s3 }
    file: repo.git/ci/tasks/prepare-pt-tools.yml
    vars:
      out_dir: pt-scripts

  - in_parallel:
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/ubuntu-22.04-*.tar}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/windows-*.zip}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/sam_inference_benchmark-*.py}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/3d_prompting-*.py}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/2d_lifting-*.py}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/runner_sam_resources-*.py}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/runner_sam_prompting-*.py}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/runner_masks_lifting-*.py}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/extract_sam_resources-*.py}
    - put: qa-artifacts.s3
      inputs: [pt-scripts]
      no_get: true
      params: {file: pt-scripts/extract_pcl_selection-*.py}

- name: registration
  plan:
  - in_parallel:
    - get: repo.git
      passed: [ship-files]
      params: { disable_git_lfs: true, submodules: none }
      trigger: true
    - get: version
      passed: [ship-files]

  - in_parallel:
    - do:
      - task: app-registration-benchmark
        params:
          BRANCH: ((branch))
          APPLICATION: sam_resources
          DEST: ((perftracker_dest))
        file: repo.git/ci/tasks/perftracker-registration.yml
        vars:
          registration: app

      - put: notifications
        inputs: [repo.git, registration]
        no_get: true
        params:
          state: success
          chat_message: "Perftracker registration of the benchmark app build."
          chat_message_file: registration/query-url.txt
          gchat_webhook: ((gchat_perftracker))

    - do:
      - task: app-registration-prompting
        params:
          BRANCH: ((branch))
          APPLICATION: sam_prompting
          DEST: ((perftracker_dest))
        file: repo.git/ci/tasks/perftracker-registration.yml
        vars:
          registration: app

      - put: notifications
        inputs: [repo.git, registration]
        no_get: true
        params:
          state: success
          chat_message: "Perftracker registration of the 3D prompting app build."
          chat_message_file: registration/query-url.txt
          gchat_webhook: ((gchat_perftracker))

    - do:
      - task: app-registration-lifting
        params:
          BRANCH: ((branch))
          APPLICATION: masks_lifting
          DEST: ((perftracker_dest))
        file: repo.git/ci/tasks/perftracker-registration.yml
        vars:
          registration: app

      - put: notifications
        inputs: [repo.git, registration]
        no_get: true
        params:
          state: success
          chat_message: "Perftracker registration of the 2D lifting app build."
          chat_message_file: registration/query-url.txt
          gchat_webhook: ((gchat_perftracker))


######### Release #########

- name: ship-it
  plan:
  - in_parallel:
    - get: repo.git
      passed: [test-ubuntu, gpu-test-ubuntu, test-windows]
      trigger: false
      params: { disable_git_lfs: true, submodules: none }
    - get: version
      passed: [test-ubuntu, gpu-test-ubuntu, test-windows]

- name: conan-pkg-ubuntu
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [ship-it]
      trigger: true
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, data] }
    - get: version
      passed: [ship-it]
    - get: ubuntu-22.04.docker
  - *pending
  - task: build-ubuntu-22.04
    image: ubuntu-22.04.docker
    file: repo.git/pix4d_build_tools/ci/tasks/conan-linux.yml
    params:
      <<: *conan-build-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/gcc-ubuntu-22.04
      RECIPE_NAME: pix4d-sam-inference

- name: conan-pkg-windows
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [ship-it]
      trigger: true
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, data] }
    - get: version
      passed: [ship-it]
  - *pending
  - task: conan-windows
    file: repo.git/pix4d_build_tools/ci/tasks/conan-windows.yml
    tags: [vs2019]
    params:
      <<: *conan-build-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/msvc2019Release
      CONAN_CREATE_CMD_EXTRA: -o pix4d-sam-inference:ship_pdb=True
      RECIPE_NAME: pix4d-sam-inference

- name: conan-pkg-macos
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [ship-it]
      trigger: false
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, data] }
    - get: version
      passed: [ship-it]
  - *pending
  - task: conan-macos
    file: repo.git/pix4d_build_tools/ci/tasks/conan-macos.yml
    tags: [sonoma-arm64]
    params:
      <<: *conan-build-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/clang15.0-macos-intel-14.0
      RECIPE_NAME: pix4d-sam-inference

- name: conan-pkg-macos-arm
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [ship-it]
      trigger: false
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, data] }
    - get: version
      passed: [ship-it]
  - *pending
  - task: conan-macos
    file: repo.git/pix4d_build_tools/ci/tasks/conan-macos.yml
    tags: [sonoma-arm64]
    params:
      <<: *conan-build-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/clang15.0-macos-arm-14.0
      RECIPE_NAME: pix4d-sam-inference

- name: set-tag
  <<: *base-job
  plan:
  - in_parallel:
      - get: repo.git
        passed: [conan-pkg-ubuntu, conan-pkg-macos, conan-pkg-macos-arm, conan-pkg-windows]
        params: { disable_git_lfs: true, submodules: [pix4d_build_tools] }
      - get: version
        passed: [conan-pkg-ubuntu, conan-pkg-macos, conan-pkg-macos-arm, conan-pkg-windows]
  - *pending
  - task: set-release-tag
    file: repo.git/pix4d_build_tools/ci/tasks/set-tag.yml
  - put: repo.git
    inputs: [set-tag.git]
    no_get: true
    params: { repository: set-tag.git }

- name: can-merge
  <<: *base-job
  plan:
  - in_parallel:
      - get: repo.git
        passed: [conan-pkg-ubuntu, conan-pkg-windows]
        params: { disable_git_lfs: true, submodules: none }
        trigger: true
      - get: version
        passed: [conan-pkg-ubuntu, conan-pkg-windows]
        trigger: true

######### Dependencies (conan) #########

- name: conan-build-dependencies
  <<: *base-job
  plan:
  - get: repo.git

  - get: conan-builder-ubuntu-22.04.docker
  - in_parallel:
    - task: build-dependencies-ubuntu-22.04
      image: conan-builder-ubuntu-22.04.docker
      file: repo.git/pix4d_build_tools/ci/tasks/conan-build-dependencies-linux.yml
      params:
        <<: *conan-build-params
        PLATFORM: ubuntu-22.04
        CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/gcc-ubuntu-22.04
        private_keys: [((github_ssh_key_base64))]
        CONAN_BUILD_CMD_EXTRA: -o pix4d-sam-inference:test_build=True

    - task: build-dependencies-macos-14.0
      file: repo.git/pix4d_build_tools/ci/tasks/conan-build-dependencies-macos.yml
      tags: [sonoma-arm64]
      params:
        <<: *conan-build-params
        PLATFORM: macOS
        CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/clang15.0-macos-intel-14.0
        private_keys: [((github_ssh_key_base64))]
        CONAN_BUILD_CMD_EXTRA: -o pix4d-sam-inference:test_build=True

    - task: build-dependencies-macos-arm64-14.0
      file: repo.git/pix4d_build_tools/ci/tasks/conan-build-dependencies-macos.yml
      tags: [sonoma-arm64]
      params:
        <<: *conan-build-params
        PLATFORM: macOS
        CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/clang15.0-macos-arm-14.0
        private_keys: [((github_ssh_key_base64))]
        CONAN_BUILD_CMD_EXTRA: -o pix4d-sam-inference:test_build=True

    - task: build-dependencies-windows
      file: repo.git/pix4d_build_tools/ci/tasks/conan-build-dependencies-windows.yml
      tags: [vs2019]
      params:
        <<: *conan-build-params
        PLATFORM: windows
        CONAN_PROFILE: .\repo.git\conan-profiles\.conan\profiles\msvc2019Release
        private_keys: [((github_ssh_key_base64))]
        CONAN_BUILD_CMD_EXTRA: -o pix4d-sam-inference:test_build=True

- name: conan-build-dependencies-debug
  <<: *base-job
  plan:
  - get: repo.git

  - in_parallel:
    - task: build-dependencies-windows
      file: repo.git/pix4d_build_tools/ci/tasks/conan-build-dependencies-windows.yml
      tags: [vs2019]
      params:
        <<: *conan-build-params
        PLATFORM: windows
        CONAN_PROFILE: .\repo.git\conan-profiles\.conan\profiles\msvc2019Debug
        private_keys: [((github_ssh_key_base64))]
        CONAN_BUILD_CMD_EXTRA: -o pix4d-sam-inference:test_build=True

######### Debug #########

- name: build-windows-debug
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [get-version]
      params: { disable_git_lfs: false, submodules: [conan-profiles, pix4d_build_tools, data] }
    - get: version
      passed: [get-version]
    - get: monday-6-30.time
      trigger: ((branch-is-stable))
  - *pending
  - task: build-windows
    file: repo.git/pix4d_build_tools/ci/tasks/build-windows.yml
    tags: [vs2019]
    params:
      <<: *conan-params
      CONAN_PROFILE: ./repo.git/conan-profiles/.conan/profiles/msvc2019Debug
      CONAN_INSTALL_CMD_EXTRA: -o pix4d-sam-inference:test_build=True -o pix4d-sam-inference:build_python_bindings=True -o pix4d-sam-inference:ship_pdb=True
      CMAKE_CMD_EXTRA: -DPYTHON_EXECUTABLE=C:\Python310\python.exe -DCMAKE_BUILD_TYPE=Debug
      PKG_NAME: windows-debug
  - put: artifacts-windows-debug.s3
    inputs: [build-dir]
    no_get: true
    params: {file: build-dir/windows-debug-*.zip}

- name: test-windows-debug
  <<: *base-job
  plan:
  - in_parallel:
    - get: repo.git
      passed: [build-windows-debug]
      params: { disable_git_lfs: false, submodules: [pix4d_build_tools, data] }
    - get: version
      passed: [build-windows-debug]
    - get: artifacts-windows-debug.s3
      passed: [build-windows-debug]
      trigger: true
      params: {unpack: true}
  - *pending
  - task: test-windows
    tags: [windows-tester]
    file: repo.git/pix4d_build_tools/ci/tasks/unit-windows.yml
    input_mapping: { build-artifacts: artifacts-windows-debug.s3 }
    params:
      HAS_GPU: "0"
      PIX4D_TEST_DATA_PATH: repo.git/data


######### Groups #########

groups:

  - name: dev
    jobs:
      - get-version
      - build-ubuntu
      - build-windows
      - build-macos
      - build-macos-arm
      - check-dependencies
      - gpu-package-ubuntu
      - gpu-test-ubuntu
      - test-ubuntu
      - test-windows
      - test-macos
      - test-macos-arm
      - ship-it
      - can-merge
      - perftracker

  - name: release
    jobs:
      - ship-it
      - conan-pkg-ubuntu
      - conan-pkg-windows
      - conan-pkg-macos
      - conan-pkg-macos-arm
      - can-merge
      - set-tag

  - name: perftracker
    jobs:
      - perftracker
      - ship-files
      - registration

  - name: conan
    jobs:
      - conan-build-dependencies
      - conan-build-dependencies-debug

  - name: debug
    jobs:
      - build-windows-debug
      - test-windows-debug
